import java_cup.runtime.*;


//----Terminales----
//-Palabras clave
terminal BREAK, CASE, DEFAULT, ELSE, IF, MAIN, NULL, RETURN, SWITCH, WHILE;
terminal TIPO_BOOL, TIPO_CHAR, TIPO_FLOAT, TIPO_INT, TIPO_STRING;

//-Entrada y salida estandar
terminal SYSREAD, SYSPRINT;

//-Separadores
terminal PARABR, PARCER, PARCURSABR, PARCURSCER, PARCUADABR, PARCUADCER;
terminal HASHTAG, DOSPUNTOS, COMA;

//-Operadores
terminal IGUAL, MAS, MENOS, POR, DIV, POTENCIA, COMPLEMENTO;
terminal AND, OR, NOT;
terminal ESIGUAL, DIFERENTE, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
terminal MASMAS, MENOSMENOS;

//-Literales
terminal java.lang.Number LIT_ENTERO;
terminal java.lang.Number LIT_FLOTANTE;
terminal java.lang.Boolean LIT_BOOLEANO;
terminal java.lang.Character LIT_CHAR;
terminal java.lang.String LIT_STRING;

//-Identificador
terminal java.lang.String IDENTIF;


//----No terminales----
//-Estructura del programa
non terminal inicio, programa, bloqueCod, return, bloqueControl, break;

//-Funciones
non terminal crearFuncion, crearParametro, funcion, parametro;

//-Sentencias
non terminal sentencia, crearVar, crearAsignVar, asignVar;
non terminal crearElemArreglo, asignElemArreg;
non terminal salidaEst;

//-Estructuras de control
non terminal estrucControl, if, while, switch, caso, casoDefault, condicion;

//-Expresiones
non terminal expr, operando, operandoIgual;
non terminal exprBin, operadorBin;
non terminal exprUna, operadorUna;
non terminal exprRel, operadorRel, operadorIgual;
non terminal exprLog, operadorLog;

//-Tipos y valores
non terminal tipoFun, tipoVar;
non terminal literal;
non terminal arreglo, tipoArreglo, elemArreglo;


//----Precedencia----
precedence left OR;
precedence left AND;
precedence left ESIGUAL, DIFERENTE;
precedence left MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
precedence left MAS, MENOS;
precedence left POR, DIV, COMPLEMENTO;
precedence left POTENCIA;
precedence right NOT;
precedence left PARCUADABR, PARCUADCER, PARABR, PARCER, MASMAS, MENOSMENOS;


//----Gramatica----
start with inicio;

//-Estructura del programa
inicio ::= programa;
programa ::= tipoFun MAIN PARABR PARCER PARCURSABR bloqueCod PARCURSCER
			| crearFuncion programa
;
bloqueCod ::= sentencia
			| estrucControl
			| return
			| sentencia bloqueCod
			| estrucControl bloqueCod
;
return ::= RETURN literal HASHTAG
		| RETURN expr HASHTAG
		| RETURN IDENTIF HASHTAG
		| RETURN funcion HASHTAG
;
bloqueControl ::= bloqueCod
				| break
;
break ::= BREAK HASHTAG;

//-Funciones
crearFuncion ::= tipoFun IDENTIF PARABR PARCER PARCURSABR bloqueCod PARCURSCER
				| tipoFun IDENTIF PARABR crearParametro PARCER PARCURSABR bloqueCod PARCURSCER
;
crearParametro ::= tipoVar IDENTIF
				| tipoVar IDENTIF COMA crearParametro
;
funcion ::= IDENTIF PARABR PARCER
		  | IDENTIF PARABR parametro PARCER
		  | SYSREAD PARABR PARCER
;
parametro ::= literal
			| expr
			| IDENTIF
			| funcion
			| literal COMA parametro
			| expr COMA parametro
			| IDENTIF COMA parametro
			| funcion COMA parametro
;

//-Sentencias
sentencia ::= crearVar HASHTAG
			| crearAsignVar HASHTAG
			| asignVar HASHTAG
			| asignElemArreg HASHTAG
			| expr HASHTAG
			| salidaEst HASHTAG
;
crearVar ::= tipoVar IDENTIF;
crearAsignVar ::= crearVar IGUAL literal
				| crearVar IGUAL expr
				| crearVar IGUAL IDENTIF
				| crearVar IGUAL funcion
				| crearVar IGUAL NULL
				| crearVar IGUAL tipoArreglo PARCUADABR LIT_ENTERO PARCUADCER
				| crearVar IGUAL tipoArreglo PARCUADABR expr PARCUADCER
				| crearVar IGUAL tipoArreglo PARCUADABR IDENTIF PARCUADCER
				| crearVar IGUAL PARCURSABR crearElemArreglo PARCURSCER
;
asignVar ::= IDENTIF IGUAL literal
			| IDENTIF IGUAL expr
			| IDENTIF IGUAL IDENTIF
			| IDENTIF IGUAL funcion
			| IDENTIF IGUAL NULL
;
crearElemArreglo ::= LIT_ENTERO
					| LIT_CHAR
					| LIT_ENTERO COMA crearElemArreglo
					| LIT_CHAR COMA crearElemArreglo
;
asignElemArreg ::= elemArreglo IGUAL LIT_ENTERO
				| elemArreglo IGUAL LIT_CHAR
				| elemArreglo IGUAL expr
				| elemArreglo IGUAL IDENTIF
				| elemArreglo IGUAL funcion
;
salidaEst ::= SYSPRINT PARABR literal PARCER
			| SYSPRINT PARABR IDENTIF PARCER
;

//-Estructuras de control
estrucControl ::= if
				| while
				| switch
;
if ::= IF PARABR condicion PARCER PARCURSABR bloqueControl PARCURSCER
	| IF PARABR condicion PARCER PARCURSABR bloqueControl PARCURSCER ELSE PARCURSABR bloqueControl PARCURSCER
;
while ::= WHILE PARABR condicion PARCER PARCURSABR bloqueControl PARCURSCER;
switch ::= SWITCH PARABR expr PARCER PARCURSABR caso casoDefault PARCURSCER
		| SWITCH PARABR IDENTIF PARCER PARCURSABR caso casoDefault PARCURSCER
		| SWITCH PARABR funcion PARCER PARCURSABR caso casoDefault PARCURSCER
;
caso ::= CASE DOSPUNTOS literal PARCURSABR bloqueControl PARCURSCER
		| CASE DOSPUNTOS literal PARCURSABR bloqueControl PARCURSCER caso
;
casoDefault ::= DEFAULT PARCURSABR bloqueControl PARCURSCER;
condicion ::= LIT_BOOLEANO
			| exprRel
			| exprLog
;

//-Expresiones
expr ::= exprBin
		| exprUna
		| exprRel
		| exprLog
;

operando ::= literal
			| IDENTIF
			| funcion
			| expr
			| PARABR expr PARCER
;
operandoIgual ::= operando
				| NULL
;
exprBin ::= operando operadorBin operando;
operadorBin ::= MAS
				| MENOS
				| DIV
				| POR
				| COMPLEMENTO
				| POTENCIA
;
exprUna ::= operando operadorUna
			| MENOS operando
;
operadorUna ::= MENOSMENOS
				| MASMAS
;
exprRel ::= operando operadorRel operando
			| operandoIgual operadorIgual operandoIgual
;
operadorRel ::= MAYOR
				| MENOR
				| MAYORIGUAL
				| MENORIGUAL
;
operadorIgual ::= ESIGUAL
				| DIFERENTE
;
exprLog ::= operando operadorLog operando
			| NOT operando
;
operadorLog ::= AND
				| OR
;

//-Tipos y valores
tipoFun ::= TIPO_INT
			| TIPO_FLOAT
			| TIPO_CHAR
;
tipoVar ::= TIPO_INT
			| TIPO_FLOAT
			| TIPO_CHAR
			| TIPO_BOOL
			| TIPO_STRING
			| arreglo
;
literal ::= LIT_ENTERO
			| LIT_FLOTANTE
			| LIT_CHAR
			| LIT_STRING
			| LIT_BOOLEANO
			| elemArreglo
;
arreglo ::= tipoArreglo PARCUADABR PARCUADCER;
tipoArreglo ::= TIPO_INT
			| TIPO_CHAR
;
elemArreglo ::= IDENTIF PARCUADABR LIT_ENTERO PARCUADCER
				| IDENTIF PARCUADABR IDENTIF PARCUADCER
				| IDENTIF PARCUADABR funcion PARCUADCER
;