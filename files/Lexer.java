// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\11\26\1\27\1\6\1\30\1\31\1\32\2\6"+
    "\4\12\1\33\12\12\1\34\1\12\1\35\10\12\1\36"+
    "\1\37\1\40\1\41\1\12\1\6\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\12\1\53"+
    "\1\54\1\55\1\56\1\57\2\12\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\12\1\66\1\12\1\67\1\70"+
    "\1\71\1\72\6\0\1\73\32\0\2\6\4\12\4\6"+
    "\1\12\2\6\1\0\7\6\1\12\4\6\1\12\5\6"+
    "\27\12\1\6\37\12\1\6\u01ca\12\4\6\14\12\16\6"+
    "\5\12\7\6\1\12\1\6\1\12\21\6\160\0\5\12"+
    "\1\6\2\12\2\6\4\12\1\6\1\12\6\6\1\12"+
    "\1\6\3\12\1\6\1\12\1\6\24\12\1\6\123\12"+
    "\1\6\213\12\1\6\5\0\2\6\246\12\1\6\46\12"+
    "\2\6\1\12\6\6\51\12\6\6\1\12\1\6\55\0"+
    "\1\6\1\0\1\6\2\0\1\6\2\0\1\6\1\0"+
    "\10\6\33\12\4\6\4\12\15\6\6\0\5\6\1\12"+
    "\4\6\13\0\1\6\1\0\3\6\53\12\37\0\4\6"+
    "\2\12\1\0\143\12\1\6\1\12\10\0\1\6\6\0"+
    "\2\12\2\0\1\6\4\0\2\12\12\0\3\12\2\6"+
    "\1\12\17\6\1\0\1\12\1\0\36\12\33\0\2\6"+
    "\131\12\13\0\1\12\16\6\12\0\41\12\11\0\2\12"+
    "\4\6\1\12\2\6\1\0\30\12\4\0\1\12\11\0"+
    "\1\12\3\0\1\12\5\0\22\6\31\12\3\0\4\6"+
    "\13\12\65\6\25\12\1\6\22\12\13\6\61\0\66\12"+
    "\3\0\1\12\22\0\1\12\7\0\12\12\2\0\2\6"+
    "\12\0\1\6\20\12\3\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\1\12\3\6\4\12"+
    "\2\6\1\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\1\12\10\6\1\0\4\6\2\12\1\6\3\12\2\0"+
    "\2\6\12\0\4\12\7\6\2\12\1\6\1\0\2\6"+
    "\3\0\1\6\6\12\4\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\2\12\1\6\2\12\2\6"+
    "\1\0\1\6\5\0\4\6\2\0\2\6\3\0\3\6"+
    "\1\0\7\6\4\12\1\6\1\12\7\6\14\0\3\12"+
    "\1\0\13\6\3\0\1\6\11\12\1\6\3\12\1\6"+
    "\26\12\1\6\7\12\1\6\2\12\1\6\5\12\2\6"+
    "\1\0\1\12\10\0\1\6\3\0\1\6\3\0\2\6"+
    "\1\12\17\6\2\12\2\0\2\6\12\0\1\6\1\12"+
    "\7\6\1\12\6\0\1\6\3\0\1\6\10\12\2\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\2\12\1\6"+
    "\5\12\2\6\1\0\1\12\7\0\2\6\2\0\2\6"+
    "\3\0\7\6\3\0\4\6\2\12\1\6\3\12\2\0"+
    "\2\6\12\0\1\6\1\12\20\6\1\0\1\12\1\6"+
    "\6\12\3\6\3\12\1\6\4\12\3\6\2\12\1\6"+
    "\1\12\1\6\2\12\3\6\2\12\3\6\3\12\3\6"+
    "\14\12\4\6\5\0\3\6\3\0\1\6\4\0\2\6"+
    "\1\12\6\6\1\0\16\6\12\0\11\6\1\12\6\6"+
    "\5\0\10\12\1\6\3\12\1\6\27\12\1\6\20\12"+
    "\3\6\1\12\7\0\1\6\3\0\1\6\4\0\7\6"+
    "\2\0\1\6\3\12\5\6\2\12\2\0\2\6\12\0"+
    "\20\6\1\12\3\0\1\6\10\12\1\6\3\12\1\6"+
    "\27\12\1\6\12\12\1\6\5\12\2\6\1\0\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\7\6\2\0\7\6"+
    "\1\12\1\6\2\12\2\0\2\6\12\0\1\6\2\12"+
    "\15\6\4\0\11\12\1\6\3\12\1\6\51\12\2\0"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\1\12\5\6"+
    "\3\12\1\0\7\6\3\12\2\0\2\6\12\0\12\6"+
    "\6\12\1\6\3\0\1\6\22\12\3\6\30\12\1\6"+
    "\11\12\1\6\1\12\2\6\7\12\3\6\1\0\4\6"+
    "\6\0\1\6\1\0\1\6\10\0\6\6\12\0\2\6"+
    "\2\0\15\6\60\12\1\0\2\12\7\0\4\6\10\12"+
    "\10\0\1\6\12\0\47\6\2\12\1\6\1\12\1\6"+
    "\5\12\1\6\30\12\1\6\1\12\1\6\12\12\1\0"+
    "\2\12\11\0\1\12\2\6\5\12\1\6\1\12\1\6"+
    "\6\0\2\6\12\0\2\6\4\12\40\6\1\12\27\6"+
    "\2\0\6\6\12\0\13\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\2\0\10\12\1\6\44\12\4\6\24\0"+
    "\1\6\2\0\5\12\13\0\1\6\44\0\11\6\1\0"+
    "\71\6\53\12\24\0\1\12\12\0\6\6\6\12\4\0"+
    "\4\12\3\0\1\12\3\0\2\12\7\0\3\12\4\0"+
    "\15\12\14\0\1\12\17\0\2\6\46\12\1\6\1\12"+
    "\5\6\1\12\2\6\53\12\1\6\115\12\1\6\4\12"+
    "\2\6\7\12\1\6\1\12\1\6\4\12\2\6\51\12"+
    "\1\6\4\12\2\6\41\12\1\6\4\12\2\6\7\12"+
    "\1\6\1\12\1\6\4\12\2\6\17\12\1\6\71\12"+
    "\1\6\4\12\2\6\103\12\2\6\3\0\40\6\20\12"+
    "\20\6\126\12\2\6\6\12\3\6\u016c\12\2\6\21\12"+
    "\1\6\32\12\5\6\113\12\3\6\13\12\7\6\15\12"+
    "\1\6\4\12\3\0\13\6\22\12\3\0\13\6\22\12"+
    "\2\0\14\6\15\12\1\6\3\12\1\6\2\0\14\6"+
    "\64\12\40\0\3\6\1\12\3\6\2\12\1\0\2\6"+
    "\12\0\41\6\4\0\1\6\12\0\6\6\131\12\7\6"+
    "\5\12\2\0\42\12\1\0\1\12\5\6\106\12\12\6"+
    "\37\12\1\6\14\0\4\6\14\0\12\6\12\0\36\12"+
    "\2\6\5\12\13\6\54\12\4\6\32\12\6\6\12\0"+
    "\46\6\27\12\5\0\4\6\65\12\12\0\1\6\35\0"+
    "\2\6\13\0\6\6\12\0\15\6\1\12\10\6\16\0"+
    "\1\6\2\0\77\6\5\0\57\12\21\0\7\12\4\6"+
    "\12\0\21\6\11\0\14\6\3\0\36\12\15\0\2\12"+
    "\12\0\54\12\16\0\14\6\44\12\24\0\10\6\12\0"+
    "\3\6\3\12\12\0\44\12\2\6\11\12\7\6\53\12"+
    "\2\6\3\12\20\6\3\0\1\6\25\0\4\12\1\0"+
    "\6\12\1\0\2\12\3\0\1\12\5\6\300\12\72\0"+
    "\1\6\5\0\26\12\2\6\6\12\2\6\46\12\2\6"+
    "\6\12\2\6\10\12\1\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\37\12\2\6\65\12\1\6\7\12\1\6"+
    "\1\12\3\6\3\12\1\6\7\12\3\6\4\12\2\6"+
    "\6\12\4\6\15\12\5\6\3\12\1\6\7\12\16\6"+
    "\5\0\30\6\2\3\5\0\20\6\2\12\23\6\1\12"+
    "\13\6\5\0\1\6\12\0\1\6\1\12\15\6\1\12"+
    "\20\6\15\12\3\6\40\12\20\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\12\4\6\1\12\2\6\12\12"+
    "\1\6\1\12\3\6\5\12\6\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\4\12\1\6\13\12\2\6\4\12"+
    "\5\6\5\12\4\6\1\12\21\6\51\12\u0177\6\57\12"+
    "\1\6\57\12\1\6\205\12\6\6\4\12\3\0\2\12"+
    "\14\6\46\12\1\6\1\12\5\6\1\12\2\6\70\12"+
    "\7\6\1\12\17\6\1\0\27\12\11\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\40\0\57\6"+
    "\1\12\325\6\3\12\31\6\11\12\6\0\1\6\5\12"+
    "\2\6\5\12\4\6\126\12\2\6\2\0\2\6\3\12"+
    "\1\6\132\12\1\6\4\12\5\6\53\12\1\6\136\12"+
    "\21\6\40\12\60\6\320\12\100\6\375\12\3\6\215\12"+
    "\103\6\56\12\2\6\15\12\3\6\20\12\12\0\2\12"+
    "\24\6\57\12\1\0\4\6\12\0\1\6\37\12\2\0"+
    "\120\12\2\0\45\6\11\12\2\6\147\12\2\6\65\12"+
    "\2\6\11\12\52\6\15\12\1\0\3\12\1\0\4\12"+
    "\1\0\27\12\5\0\4\6\1\0\13\6\1\12\7\6"+
    "\64\12\14\6\2\0\62\12\22\0\12\6\12\0\6\6"+
    "\22\0\6\12\3\6\1\12\1\6\2\12\13\0\34\12"+
    "\10\0\2\6\27\12\15\0\14\6\35\12\3\6\4\0"+
    "\57\12\16\0\16\6\1\12\12\0\6\6\5\12\1\0"+
    "\12\12\12\0\5\12\1\6\51\12\16\0\11\6\3\12"+
    "\1\0\10\12\2\0\2\6\12\0\6\6\27\12\3\6"+
    "\1\12\3\0\62\12\1\0\1\12\3\0\2\12\2\0"+
    "\5\12\2\0\1\12\1\0\1\12\30\6\3\12\2\6"+
    "\13\12\5\0\2\6\3\12\2\0\12\6\6\12\2\6"+
    "\6\12\2\6\6\12\11\6\7\12\1\6\7\12\1\6"+
    "\53\12\1\6\16\12\6\6\163\12\10\0\1\6\2\0"+
    "\2\6\12\0\6\6\244\12\14\6\27\12\4\6\61\12"+
    "\4\6\u0100\3\156\12\2\6\152\12\46\6\7\12\14\6"+
    "\5\12\5\6\1\12\1\0\12\12\1\6\15\12\1\6"+
    "\5\12\1\6\1\12\1\6\2\12\1\6\2\12\1\6"+
    "\154\12\41\6\153\12\22\6\100\12\2\6\66\12\50\6"+
    "\15\12\3\6\20\0\20\6\20\0\3\6\2\12\30\6"+
    "\3\12\31\6\1\12\6\6\5\12\1\6\207\12\2\6"+
    "\1\0\4\6\1\12\13\6\12\0\7\6\32\12\4\6"+
    "\1\12\1\6\32\12\13\6\131\12\3\6\6\12\2\6"+
    "\6\12\2\6\6\12\2\6\3\12\3\6\2\12\3\6"+
    "\2\12\22\6\3\0\4\6\14\12\1\6\32\12\1\6"+
    "\23\12\1\6\2\12\1\6\17\12\2\6\16\12\42\6"+
    "\173\12\105\6\65\12\210\6\1\0\202\6\35\12\3\6"+
    "\61\12\17\6\1\0\37\6\40\12\15\6\36\12\5\6"+
    "\46\12\5\0\5\6\36\12\2\6\44\12\4\6\10\12"+
    "\1\6\5\12\52\6\236\12\2\6\12\0\6\6\44\12"+
    "\4\6\44\12\4\6\50\12\10\6\64\12\234\6\67\12"+
    "\11\6\26\12\12\6\10\12\230\6\6\12\2\6\1\12"+
    "\1\6\54\12\1\6\2\12\3\6\1\12\2\6\27\12"+
    "\12\6\27\12\11\6\37\12\101\6\23\12\1\6\2\12"+
    "\12\6\26\12\12\6\32\12\106\6\70\12\6\6\2\12"+
    "\100\6\1\12\3\0\1\6\2\0\5\6\4\0\4\12"+
    "\1\6\3\12\1\6\35\12\2\6\3\0\4\6\1\0"+
    "\40\6\35\12\3\6\35\12\43\6\10\12\1\6\34\12"+
    "\2\0\31\6\66\12\12\6\26\12\12\6\23\12\15\6"+
    "\22\12\156\6\111\12\67\6\63\12\15\6\63\12\15\6"+
    "\44\12\4\0\10\6\12\0\u0146\6\52\12\1\6\2\0"+
    "\3\6\2\12\116\6\35\12\12\6\1\12\10\6\26\12"+
    "\13\0\137\6\25\12\33\6\27\12\11\6\3\0\65\12"+
    "\17\0\37\6\12\0\17\6\4\0\55\12\13\0\2\6"+
    "\1\0\17\6\1\0\2\6\31\12\7\6\12\0\6\6"+
    "\3\0\44\12\16\0\1\6\12\0\4\6\1\12\2\0"+
    "\1\12\10\6\43\12\1\0\2\6\1\12\11\6\3\0"+
    "\60\12\16\0\4\12\4\6\4\0\1\6\14\0\1\12"+
    "\1\6\1\12\43\6\22\12\1\6\31\12\14\0\6\6"+
    "\1\0\101\6\7\12\1\6\1\12\1\6\4\12\1\6"+
    "\17\12\1\6\12\12\7\6\57\12\14\0\5\6\12\0"+
    "\6\6\4\0\1\6\10\12\2\6\2\12\2\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\1\6\2\0"+
    "\1\12\7\0\2\6\2\0\2\6\3\0\2\6\1\12"+
    "\6\6\1\0\5\6\5\12\2\0\2\6\7\0\3\6"+
    "\5\0\213\6\65\12\22\0\4\12\5\6\12\0\4\6"+
    "\1\0\3\12\36\6\60\12\24\0\2\12\1\6\1\12"+
    "\10\6\12\0\246\6\57\12\7\0\2\6\11\0\27\6"+
    "\4\12\2\0\42\6\60\12\21\0\3\6\1\12\13\6"+
    "\12\0\46\6\53\12\15\0\1\12\7\6\12\0\66\6"+
    "\33\12\2\6\17\0\4\6\12\0\306\6\54\12\17\0"+
    "\145\6\100\12\12\0\25\6\10\12\2\6\1\12\2\6"+
    "\10\12\1\6\2\12\1\6\30\12\6\0\1\6\2\0"+
    "\2\6\4\0\1\12\1\0\1\12\2\0\14\6\12\0"+
    "\106\6\10\12\2\6\47\12\7\0\2\6\7\0\1\12"+
    "\1\6\1\12\1\0\33\6\1\12\12\0\50\12\7\0"+
    "\1\12\4\0\10\6\1\0\10\6\1\12\13\0\56\12"+
    "\20\0\3\6\1\12\42\6\71\12\7\6\11\12\1\6"+
    "\45\12\10\0\1\6\10\0\1\12\17\6\12\0\30\6"+
    "\36\12\2\6\26\0\1\6\16\0\111\6\7\12\1\6"+
    "\2\12\1\6\46\12\6\0\3\6\1\0\1\6\2\0"+
    "\1\6\7\0\1\12\1\0\10\6\12\0\6\6\6\12"+
    "\1\6\2\12\1\6\40\12\5\0\1\6\2\0\1\6"+
    "\5\0\1\12\7\6\12\0\u0136\6\23\12\4\0\271\6"+
    "\1\12\54\6\4\12\37\6\232\12\146\6\157\12\21\6"+
    "\304\12\274\6\57\12\1\6\11\0\307\6\107\12\271\6"+
    "\71\12\7\6\37\12\1\6\12\0\146\6\36\12\2\6"+
    "\5\0\13\6\60\12\7\0\11\6\4\12\14\6\12\0"+
    "\11\6\25\12\5\6\23\12\260\6\100\12\200\6\113\12"+
    "\4\6\1\0\1\12\67\0\7\6\4\0\15\12\100\6"+
    "\2\12\1\6\1\12\1\0\13\6\2\0\16\6\370\12"+
    "\10\6\326\12\52\6\11\12\367\6\37\12\61\6\3\12"+
    "\21\6\4\12\10\6\u018c\12\4\6\153\12\5\6\15\12"+
    "\3\6\11\12\7\6\12\12\3\6\2\0\1\6\4\0"+
    "\301\6\5\0\3\6\26\0\2\6\7\0\36\6\4\0"+
    "\224\6\3\0\273\6\125\12\1\6\107\12\1\6\2\12"+
    "\2\6\1\12\2\6\2\12\2\6\4\12\1\6\14\12"+
    "\1\6\1\12\1\6\7\12\1\6\101\12\1\6\4\12"+
    "\2\6\10\12\1\6\7\12\1\6\34\12\1\6\4\12"+
    "\1\6\5\12\1\6\1\12\3\6\7\12\1\6\u0154\12"+
    "\2\6\31\12\1\6\31\12\1\6\37\12\1\6\31\12"+
    "\1\6\37\12\1\6\31\12\1\6\37\12\1\6\31\12"+
    "\1\6\37\12\1\6\31\12\1\6\10\12\2\6\151\0"+
    "\4\6\62\0\10\6\1\0\16\6\1\0\26\6\5\0"+
    "\1\6\17\0\120\6\7\0\1\6\21\0\2\6\7\0"+
    "\1\6\2\0\1\6\5\0\325\6\55\12\3\6\7\0"+
    "\7\12\2\6\12\0\4\6\1\12\u0171\6\54\12\16\0"+
    "\5\6\306\12\13\6\7\0\51\6\104\12\7\0\1\12"+
    "\4\6\12\0\u0156\6\1\12\117\6\4\12\1\6\33\12"+
    "\1\6\2\12\1\6\1\12\2\6\1\12\1\6\12\12"+
    "\1\6\4\12\1\6\1\12\1\6\1\12\6\6\1\12"+
    "\4\6\1\12\1\6\1\12\1\6\1\12\1\6\3\12"+
    "\1\6\2\12\1\6\1\12\2\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\1\12\1\6\2\12"+
    "\1\6\1\12\2\6\4\12\1\6\7\12\1\6\4\12"+
    "\1\6\4\12\1\6\1\12\1\6\12\12\1\6\21\12"+
    "\5\6\3\12\1\6\5\12\1\6\21\12\u0134\6\12\0"+
    "\6\6\336\12\42\6\65\12\13\6\336\12\2\6\u0182\12"+
    "\16\6\u0131\12\37\6\36\12\342\6\113\12\266\6\1\0"+
    "\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\1\6\1\26"+
    "\1\27\1\30\14\6\1\31\1\32\1\33\1\34\1\35"+
    "\2\36\1\37\2\1\2\40\1\1\1\41\1\42\1\43"+
    "\5\0\1\44\1\45\1\46\12\6\1\47\11\6\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\10\50\3\0\2\62\1\63\12\6\1\64\10\6"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\2\0\1\6\1\75\1\6\1\76\1\77\1\6\1\100"+
    "\3\6\1\101\1\102\5\6\1\103\1\6\1\0\1\6"+
    "\1\104\1\6\1\105\1\106\6\6\1\107\1\0\3\6"+
    "\1\110\1\111\1\112\2\6\1\0\1\6\1\113\2\6"+
    "\1\114\1\0\1\6\1\115\1\116\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\264\0\360\0\u012c\0\264"+
    "\0\264\0\u0168\0\264\0\264\0\264\0\264\0\264\0\u01a4"+
    "\0\264\0\u01e0\0\264\0\u021c\0\u0258\0\u0294\0\264\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\264\0\264\0\264\0\u03c0\0\u03fc"+
    "\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\264\0\264\0\264\0\264\0\u0690\0\264"+
    "\0\u06cc\0\264\0\u0708\0\u0744\0\264\0\u0780\0\u07bc\0\264"+
    "\0\264\0\264\0\u0258\0\u07f8\0\u0834\0\u0870\0\u08ac\0\264"+
    "\0\264\0\264\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14"+
    "\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0168\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\264\0\u0ff0\0\u08ac\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248"+
    "\0\u0168\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\u1464\0\u14a0\0\u14dc\0\u0168\0\u1518\0\u0168\0\u0168"+
    "\0\u1554\0\u0168\0\u1590\0\u15cc\0\u1608\0\u0168\0\u0168\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u0168\0\u1770\0\u17ac\0\u17e8"+
    "\0\u0168\0\u1824\0\u0168\0\u0168\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\u0168\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u0168"+
    "\0\u0168\0\u0168\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u0168\0\u1ba8"+
    "\0\u1be4\0\u0168\0\u1c20\0\u1c5c\0\u0168\0\u0168\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\12\1\34\1\4\1\35\1\36"+
    "\1\12\1\37\1\40\1\41\1\42\1\43\2\12\1\44"+
    "\2\12\1\45\1\46\1\12\1\47\1\50\1\51\2\12"+
    "\1\52\1\12\1\53\1\54\1\55\1\56\1\4\2\57"+
    "\1\60\2\57\1\61\2\57\1\62\26\57\1\63\34\57"+
    "\2\64\1\65\2\64\1\66\6\64\1\4\22\64\1\67"+
    "\34\64\76\0\1\5\122\0\1\70\42\0\1\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\25\12\4\0"+
    "\1\12\20\0\1\71\75\0\1\72\2\0\1\73\1\26"+
    "\4\0\1\74\57\0\1\75\4\0\1\76\72\0\1\77"+
    "\75\0\2\26\76\0\1\100\73\0\1\101\73\0\1\102"+
    "\42\0\1\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\14\12\1\103\10\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\15\12\1\104\1\105"+
    "\6\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\1\106\6\12\1\107\15\12\4\0\2\12"+
    "\11\0\1\12\12\0\2\12\4\0\3\12\4\0\4\12"+
    "\1\110\20\12\4\0\2\12\11\0\1\12\12\0\2\12"+
    "\4\0\3\12\4\0\12\12\1\111\12\12\4\0\2\12"+
    "\11\0\1\12\12\0\2\12\4\0\3\12\4\0\1\112"+
    "\11\12\1\113\6\12\1\114\3\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\5\12\1\115"+
    "\6\12\1\116\10\12\4\0\2\12\11\0\1\12\12\0"+
    "\2\12\4\0\3\12\4\0\1\117\24\12\4\0\2\12"+
    "\11\0\1\12\12\0\2\12\4\0\3\12\4\0\21\12"+
    "\1\120\3\12\4\0\2\12\11\0\1\12\12\0\2\12"+
    "\4\0\3\12\4\0\4\12\1\121\20\12\4\0\2\12"+
    "\11\0\1\12\12\0\2\12\4\0\3\12\4\0\20\12"+
    "\1\122\2\12\1\123\1\124\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\16\12\1\125\6\12"+
    "\4\0\2\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\7\12\1\126\15\12\4\0\1\12\2\57\1\0"+
    "\2\57\1\0\2\57\1\0\26\57\1\0\34\57\2\0"+
    "\1\60\71\0\2\127\4\0\2\127\1\130\3\127\1\131"+
    "\22\127\1\132\3\127\1\133\3\127\1\134\6\127\1\135"+
    "\1\127\1\136\1\127\1\137\10\127\15\0\1\140\61\0"+
    "\1\65\71\0\2\127\4\0\2\127\1\141\3\127\1\142"+
    "\22\127\1\143\3\127\1\144\3\127\1\145\6\127\1\146"+
    "\1\127\1\147\1\127\1\150\10\127\57\0\1\151\15\0"+
    "\17\152\1\153\54\152\2\76\1\154\2\76\1\155\66\76"+
    "\25\0\2\156\45\0\1\12\11\0\1\12\12\0\2\12"+
    "\4\0\3\12\4\0\20\12\1\157\4\12\4\0\2\12"+
    "\11\0\1\12\12\0\2\12\4\0\3\12\4\0\15\12"+
    "\1\160\7\12\4\0\2\12\11\0\1\12\12\0\2\12"+
    "\4\0\3\12\4\0\4\12\1\161\20\12\4\0\2\12"+
    "\11\0\1\12\12\0\2\12\4\0\3\12\4\0\17\12"+
    "\1\162\5\12\4\0\2\12\11\0\1\12\12\0\2\12"+
    "\4\0\3\12\4\0\1\163\24\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\5\12\1\164"+
    "\17\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\17\12\1\165\5\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\12\12\1\166"+
    "\12\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\15\12\1\167\7\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\14\12\1\170"+
    "\10\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\20\12\1\171\4\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\10\12\1\172"+
    "\14\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\12\12\1\173\12\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\20\12\1\174"+
    "\4\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\16\12\1\175\6\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\10\12\1\176"+
    "\14\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\17\12\1\177\5\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\21\12\1\200"+
    "\3\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\10\12\1\201\14\12\4\0\1\12\14\0"+
    "\1\202\73\0\1\203\73\0\1\204\73\0\1\205\73\0"+
    "\1\206\73\0\1\207\73\0\1\210\73\0\1\211\141\0"+
    "\1\212\11\0\17\152\1\213\54\152\17\0\1\153\4\0"+
    "\1\154\51\0\1\154\71\0\1\12\11\0\1\12\12\0"+
    "\2\12\4\0\3\12\4\0\4\12\1\214\20\12\4\0"+
    "\2\12\11\0\1\12\12\0\2\12\4\0\3\12\4\0"+
    "\12\12\1\215\12\12\4\0\2\12\11\0\1\12\12\0"+
    "\2\12\4\0\3\12\4\0\1\216\24\12\4\0\2\12"+
    "\11\0\1\12\12\0\2\12\4\0\3\12\4\0\4\12"+
    "\1\217\20\12\4\0\2\12\11\0\1\12\12\0\2\12"+
    "\4\0\3\12\4\0\16\12\1\220\6\12\4\0\2\12"+
    "\11\0\1\12\12\0\2\12\4\0\3\12\4\0\1\221"+
    "\24\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\4\12\1\222\20\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\17\12\1\223"+
    "\5\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\1\224\24\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\2\12\1\225\22\12"+
    "\4\0\2\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\14\12\1\226\10\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\12\12\1\227\12\12"+
    "\4\0\2\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\21\12\1\230\3\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\10\12\1\231\14\12"+
    "\4\0\2\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\20\12\1\232\4\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\1\12\1\233\1\234\4\0\25\12"+
    "\4\0\2\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\4\12\1\235\20\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\12\12\1\236\12\12"+
    "\4\0\1\12\46\0\1\237\25\0\17\152\1\213\4\152"+
    "\1\154\47\152\1\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\16\12\1\240\6\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\11\12\1\241"+
    "\13\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\21\12\1\242\3\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\4\12\1\243"+
    "\20\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\20\12\1\244\4\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\20\12\1\245"+
    "\4\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\16\12\1\246\6\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\14\12\1\247"+
    "\10\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\2\12\1\250\22\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\16\12\1\251"+
    "\6\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\4\12\1\252\20\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\4\12\1\253"+
    "\20\12\4\0\1\12\60\0\1\254\13\0\1\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\15\12\1\255"+
    "\7\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\12\12\1\256\12\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\10\12\1\257"+
    "\14\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\14\12\1\260\10\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\6\12\1\261"+
    "\16\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\7\12\1\262\15\12\4\0\2\12\11\0"+
    "\1\12\12\0\2\12\4\0\3\12\4\0\10\12\1\263"+
    "\14\12\4\0\2\12\11\0\1\12\12\0\2\12\4\0"+
    "\3\12\4\0\1\264\24\12\4\0\1\12\57\0\1\265"+
    "\14\0\1\12\11\0\1\12\12\0\2\12\4\0\1\12"+
    "\1\266\1\12\4\0\25\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\20\12\1\267\4\12"+
    "\4\0\2\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\15\12\1\270\7\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\14\12\1\271\10\12"+
    "\4\0\2\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\3\12\1\272\21\12\4\0\1\12\34\0\1\273"+
    "\37\0\1\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\15\12\1\274\7\12\4\0\2\12\11\0\1\12"+
    "\12\0\2\12\4\0\3\12\4\0\14\12\1\275\10\12"+
    "\4\0\2\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\20\12\1\276\4\12\4\0\1\12\57\0\1\277"+
    "\14\0\1\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\17\12\1\300\5\12\4\0\1\12\61\0\1\301"+
    "\12\0\1\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\10\12\1\302\14\12\4\0\1\12\52\0\1\303"+
    "\21\0\1\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\20\12\1\304\4\12\4\0\1\12\62\0\1\305"+
    "\11\0\1\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\10\12\1\306\14\12\4\0\1\12\52\0\1\307"+
    "\21\0\1\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\22\12\1\310\2\12\4\0\1\12\64\0\1\311"+
    "\7\0\1\12\11\0\1\12\12\0\2\12\4\0\3\12"+
    "\4\0\15\12\1\312\7\12\4\0\1\12\57\0\1\73"+
    "\14\0\1\12\11\0\1\12\10\0\1\77\1\0\2\12"+
    "\4\0\3\12\4\0\25\12\4\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\2\11\1\1\5\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\4\1\3\11\14\1\4\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\2\1\3\11"+
    "\5\0\3\11\24\1\12\11\10\1\3\0\1\11\25\1"+
    "\10\11\2\0\23\1\1\0\14\1\1\0\10\1\1\0"+
    "\5\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
//Almacena el valor al leer strings
StringBuffer string = new StringBuffer();

//Fabricas de simbolos
private Symbol symbol(int type) {
	return symbol(type, yyline, yycolumn);
}
private Symbol symbol(int type, Object value) {
	return symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Caracter ilegal <" + yytext() + "> en la linea " + yyline + ", columna " + yycolumn);
            }
            // fall through
          case 79: break;
          case 2:
            { /* Ignorar */
            }
            // fall through
          case 80: break;
          case 3:
            { System.out.println("NOT");return symbol(NOT);
            }
            // fall through
          case 81: break;
          case 4:
            { yybegin(STRING); string.setLength(0);
            }
            // fall through
          case 82: break;
          case 5:
            { System.out.println("HASHTAG");return symbol(HASHTAG);
            }
            // fall through
          case 83: break;
          case 6:
            { System.out.println("IDENTIFICADOR");return symbol(IDENTIF, yytext();)
            }
            // fall through
          case 84: break;
          case 7:
            { System.out.println("AND");return symbol(AND);
            }
            // fall through
          case 85: break;
          case 8:
            { yybegin(CHAR)
            }
            // fall through
          case 86: break;
          case 9:
            { System.out.println("PAR ABRIR");return symbol(PARABR);
            }
            // fall through
          case 87: break;
          case 10:
            { System.out.println("PAR CERRAR");return symbol(PARCER);
            }
            // fall through
          case 88: break;
          case 11:
            { System.out.println("POR");return symbol(POR);
            }
            // fall through
          case 89: break;
          case 12:
            { System.out.println("MAS");return symbol(MAS);
            }
            // fall through
          case 90: break;
          case 13:
            { System.out.println("COMA");return symbol(COMA);
            }
            // fall through
          case 91: break;
          case 14:
            { System.out.println("MENOS");return symbol(MENOS);
            }
            // fall through
          case 92: break;
          case 15:
            { System.out.println("PUNTO");return symbol(PUNTO);
            }
            // fall through
          case 93: break;
          case 16:
            { System.out.println("DIV");return symbol(DIV);
            }
            // fall through
          case 94: break;
          case 17:
            { System.out.println("LITERAL ENTERO");return symbol(LIT_ENTERO, new Integer.valueOf(yytext()));
            }
            // fall through
          case 95: break;
          case 18:
            { System.out.println("DOS PUNTOS");return symbol(DOSPUNTOS);
            }
            // fall through
          case 96: break;
          case 19:
            { System.out.println("MENOR QUE");return symbol(MENOR);
            }
            // fall through
          case 97: break;
          case 20:
            { System.out.println("IGUAL");return symbol(IGUAL);
            }
            // fall through
          case 98: break;
          case 21:
            { System.out.println("MAYOR QUE");return symbol(MAYOR);
            }
            // fall through
          case 99: break;
          case 22:
            { System.out.println("PAR CUAD ABRIR");return symbol(PARCUADABR);
            }
            // fall through
          case 100: break;
          case 23:
            { System.out.println("PAR CUAD CERRAR");return symbol(PARCUADCER);
            }
            // fall through
          case 101: break;
          case 24:
            { System.out.println("POTENCIA");return symbol(POTENCIA);
            }
            // fall through
          case 102: break;
          case 25:
            { System.out.println("PAR CURS ABRIR");return symbol(PARCURSABR);
            }
            // fall through
          case 103: break;
          case 26:
            { System.out.println("OR");return symbol(OR);
            }
            // fall through
          case 104: break;
          case 27:
            { System.out.println("PAR CURS CERRAR");return symbol(PARCURSCER);
            }
            // fall through
          case 105: break;
          case 28:
            { System.out.println("COMPLEMENTO");return symbol(COMPLEMENTO);
            }
            // fall through
          case 106: break;
          case 29:
            { string.append( yytext() );
            }
            // fall through
          case 107: break;
          case 30:
            { throw new RuntimeException("String incompleta al final de linea");
            }
            // fall through
          case 108: break;
          case 31:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL STRING");
						 return symbol(LIT_STRING, string.toString());
            }
            // fall through
          case 109: break;
          case 32:
            { throw new RuntimeException("Literal caracter incompleto al final de linea");
            }
            // fall through
          case 110: break;
          case 33:
            { System.out.println("DIFERENTE");return symbol(DIFERENTE);
            }
            // fall through
          case 111: break;
          case 34:
            { System.out.println("MAS MAS");return symbol(MASMAS);
            }
            // fall through
          case 112: break;
          case 35:
            { System.out.println("MENOS MENOS");return symbol(MENOSMENOS);
            }
            // fall through
          case 113: break;
          case 36:
            { System.out.println("MENOR IGUAL QUE");return symbol(MENORIGUAL);
            }
            // fall through
          case 114: break;
          case 37:
            { System.out.println("ES IGUAL");return symbol(ESIGUAL);
            }
            // fall through
          case 115: break;
          case 38:
            { System.out.println("MAYOR IGUAL QUE");return symbol(MAYORIGUAL);
            }
            // fall through
          case 116: break;
          case 39:
            { System.out.println("IF");return symbol(IF);
            }
            // fall through
          case 117: break;
          case 40:
            { throw new RuntimeException("Secuencia de escape ilegal <" + yytext() + ">");
            }
            // fall through
          case 118: break;
          case 41:
            { string.append( '\"' );
            }
            // fall through
          case 119: break;
          case 42:
            { string.append( '\'' );
            }
            // fall through
          case 120: break;
          case 43:
            { string.append( '\\' );
            }
            // fall through
          case 121: break;
          case 44:
            { string.append( '\b' );
            }
            // fall through
          case 122: break;
          case 45:
            { string.append( '\f' );
            }
            // fall through
          case 123: break;
          case 46:
            { string.append( '\n' );
            }
            // fall through
          case 124: break;
          case 47:
            { string.append( '\r' );
            }
            // fall through
          case 125: break;
          case 48:
            { string.append( '\t' );
            }
            // fall through
          case 126: break;
          case 49:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, yytext().charAt(0));
            }
            // fall through
          case 127: break;
          case 50:
            { System.out.println("COMENTARIO");
            }
            // fall through
          case 128: break;
          case 51:
            { System.out.println("LITERAL FLOTANTE");return symbol(LIT_FLOTANTE, new Float.valueOf(yytext()));
            }
            // fall through
          case 129: break;
          case 52:
            { System.out.println("TIPO INT");return symbol(TYPEINT);
            }
            // fall through
          case 130: break;
          case 53:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, '\"');
            }
            // fall through
          case 131: break;
          case 54:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, '\'');
            }
            // fall through
          case 132: break;
          case 55:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, '\\');
            }
            // fall through
          case 133: break;
          case 56:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, '\b');
            }
            // fall through
          case 134: break;
          case 57:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, '\f');
            }
            // fall through
          case 135: break;
          case 58:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, '\n');
            }
            // fall through
          case 136: break;
          case 59:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, '\r');
            }
            // fall through
          case 137: break;
          case 60:
            { yybegin(YYINITIAL);
						 System.out.println("LITERAL CHAR");
						 return symbol(LIT_CHAR, '\t');
            }
            // fall through
          case 138: break;
          case 61:
            { System.out.println("TIPO BOOL");return symbol(TYPEBOOL);
            }
            // fall through
          case 139: break;
          case 62:
            { System.out.println("CASE");return symbol(CASE);
            }
            // fall through
          case 140: break;
          case 63:
            { System.out.println("TIPO CHAR");return symbol(TYPECHAR);
            }
            // fall through
          case 141: break;
          case 64:
            { System.out.println("ELSE");return symbol(ELSE);
            }
            // fall through
          case 142: break;
          case 65:
            { System.out.println("MAIN");return symbol(MAIN);
            }
            // fall through
          case 143: break;
          case 66:
            { System.out.println("NULL");return symbol(NULL);
            }
            // fall through
          case 144: break;
          case 67:
            { System.out.println("LITERAL TRUE");return symbol(LIT_BOOLEANO, true);
            }
            // fall through
          case 145: break;
          case 68:
            { System.out.println("BREAK");return symbol(BREAK);
            }
            // fall through
          case 146: break;
          case 69:
            { System.out.println("LITERAL FALSE");return symbol(LIT_BOOLEANO, false);
            }
            // fall through
          case 147: break;
          case 70:
            { System.out.println("TIPO FLOAT");return symbol(TYPEFLOAT);
            }
            // fall through
          case 148: break;
          case 71:
            { System.out.println("WHILE");return symbol(WHILE);
            }
            // fall through
          case 149: break;
          case 72:
            { System.out.println("RETURN");return symbol(RETURN);
            }
            // fall through
          case 150: break;
          case 73:
            { System.out.println("TIPO STRING");return symbol(TYPESTRING);
            }
            // fall through
          case 151: break;
          case 74:
            { System.out.println("SWITCH");return symbol(SWITCH);
            }
            // fall through
          case 152: break;
          case 75:
            { System.out.println("DEFAULT");return symbol(DEFAULT);
            }
            // fall through
          case 153: break;
          case 76:
            { System.out.println("SYSREAD");return symbol(SYSREAD);
            }
            // fall through
          case 154: break;
          case 77:
            { System.out.println("FUNCTION");return symbol(FUNCTION);
            }
            // fall through
          case 155: break;
          case 78:
            { System.out.println("SYSPRINT");return symbol(SYSPRINT);
            }
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
